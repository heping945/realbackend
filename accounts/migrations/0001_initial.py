# -*- coding: utf-8 -*-
# Generated by Django 1.11.15 on 2020-02-07 22:13
from __future__ import unicode_literals

import accounts.models
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(auto_created=True, default=accounts.models.create_uuid, editable=False, primary_key=True, serialize=False)),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('nickname', models.CharField(blank=True, max_length=32, null=True, verbose_name='昵称')),
                ('gender', models.IntegerField(choices=[(1, '男'), (0, '女'), (-1, '未知')], default=-1, verbose_name='性别')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='居住地')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='生日')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, unique=True, verbose_name='邮箱')),
                ('phone', models.CharField(blank=True, max_length=11, null=True, unique=True, verbose_name='手机')),
                ('desc', models.CharField(blank=True, max_length=250, null=True, verbose_name='个人描述')),
                ('avatar', models.ImageField(blank=True, default='/avatars/default.png', upload_to=accounts.models.user_directory_path, verbose_name='头像')),
                ('headline', models.CharField(blank=True, max_length=30, null=True, verbose_name='简介')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('mod_date', models.DateTimeField(auto_now=True, verbose_name='上次更新时间')),
                ('answer_count', models.PositiveIntegerField(default=0, verbose_name='回答数')),
                ('articles_count', models.PositiveIntegerField(default=0, verbose_name='文章数')),
                ('follower_count', models.PositiveIntegerField(default=0, verbose_name='关注者数')),
                ('following_count', models.PositiveIntegerField(default=0, verbose_name='关注人数')),
                ('urltoken', models.SlugField(blank=True, max_length=60, verbose_name='urltoken')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': '用户账户',
                'verbose_name_plural': '用户账户',
                'ordering': ['create_time'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
